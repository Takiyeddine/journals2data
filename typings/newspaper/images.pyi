"""
This type stub file was generated by pyright.
"""

"""
The following image extraction implementation was taken from an old
copy of Reddit's source code.
"""
__title__ = ...
__author__ = ...
__license__ = ...
__copyright__ = ...
log = ...
chunk_size = ...
thumbnail_size = ...
minimal_area = ...
def image_to_str(image): # -> str:
    ...

def str_to_image(s): # -> Image:
    ...

def prepare_image(image):
    ...

def image_entropy(img): # -> float | int:
    """ Calculate the entropy of an image
    """
    ...

def square_image(img):
    """If the image is taller than it is wide, square it off. determine
    which pieces to cut off based on the entropy pieces
    """
    ...

def clean_url(url): # -> str:
    """Url quotes unicode data out of urls
    """
    ...

def fetch_url(url, useragent, referer=..., retries=..., dimension=...): # -> tuple[None, None] | tuple[str, Any] | None:
    ...

def fetch_image_dimension(url, useragent, referer=..., retries=...): # -> tuple[None, None] | tuple[str, Any] | None:
    ...

class Scraper:
    def __init__(self, article) -> None:
        ...
    
    def largest_image_url(self): # -> None:
        ...
    
    def calculate_area(self, img_url, dimension): # -> Literal[0]:
        ...
    
    def satisfies_requirements(self, img_url): # -> bool:
        ...
    
    def thumbnail(self): # -> tuple[Unknown | Image, Unknown] | tuple[None, None] | None:
        """Identifies top image, trims out a thumbnail and also has a url
        """
        ...
    


