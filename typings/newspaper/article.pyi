"""
This type stub file was generated by pyright.
"""

import typing

__title__ = ...
__author__ = ...
__license__ = ...
__copyright__ = ...
log = ...
class ArticleDownloadState:
    NOT_STARTED = ...
    FAILED_RESPONSE = ...
    SUCCESS = ...


class ArticleException(Exception):
    ...


class Article:
    """Article objects abstract an online news article page
    """
    title: typing.Optional[str]
    html: str
    text: str

    def __init__(self, url, title=..., source_url=..., config=..., **kwargs) -> None:
        """The **kwargs argument may be filled with config values, which
        is added into the config object
        """
        ...
    
    def build(self): # -> None:
        """Build a lone article from a URL independent of the source (newspaper).
        Don't normally call this method b/c it's good to multithread articles
        on a source (newspaper) level.
        """
        ...
    
    def download(self, input_html=..., title=..., recursion_counter=...): # -> None:
        """Downloads the link's HTML content, don't use if you are batch async
        downloading articles

        recursion_counter (currently 1) stops refreshes that are potentially
        infinite
        """
        ...
    
    def parse(self): # -> None:
        ...
    
    def fetch_images(self): # -> None:
        ...
    
    def has_top_image(self): # -> bool:
        ...
    
    def is_valid_url(self): # -> bool:
        """Performs a check on the url of this link to determine if article
        is a real news article or not
        """
        ...
    
    def is_valid_body(self): # -> bool:
        """If the article's body text is long enough to meet
        standard article requirements, keep the article
        """
        ...
    
    def is_media_news(self): # -> bool:
        """If the article is related heavily to media:
        gallery, video, big pictures, etc
        """
        ...
    
    def nlp(self): # -> None:
        """Keyword extraction wrapper
        """
        ...
    
    def get_parse_candidate(self): # -> ParsingCandidate:
        """A parse candidate is a wrapper object holding a link hash of this
        article and a final_url of the article
        """
        ...
    
    def build_resource_path(self): # -> None:
        """Must be called after computing HTML/final URL
        """
        ...
    
    def get_resource_path(self): # -> str:
        """Every article object has a special directory to store data in from
        initialization to garbage collection
        """
        ...
    
    def release_resources(self): # -> None:
        ...
    
    def set_reddit_top_img(self): # -> None:
        """Wrapper for setting images. Queries known image attributes
        first, then uses Reddit's image algorithm as a fallback.
        """
        ...
    
    def set_title(self, input_title): # -> None:
        ...
    
    def set_text(self, text): # -> None:
        ...
    
    def set_html(self, html): # -> None:
        """Encode HTML before setting it
        """
        ...
    
    def set_article_html(self, article_html): # -> None:
        """Sets the HTML of just the article's `top_node`
        """
        ...
    
    def set_meta_img(self, src_url): # -> None:
        ...
    
    def set_top_img(self, src_url): # -> None:
        ...
    
    def set_top_img_no_check(self, src_url): # -> None:
        """Provide 2 APIs for images. One at "top_img", "imgs"
        and one at "top_image", "images"
        """
        ...
    
    def set_imgs(self, imgs): # -> None:
        """The motive for this method is the same as above, provide APIs
        for both `article.imgs` and `article.images`
        """
        ...
    
    def set_keywords(self, keywords): # -> None:
        """Keys are stored in list format
        """
        ...
    
    def set_authors(self, authors): # -> None:
        """Authors are in ["firstName lastName", "firstName lastName"] format
        """
        ...
    
    def set_summary(self, summary): # -> None:
        """Summary here refers to a paragraph of text from the
        title text and body text
        """
        ...
    
    def set_meta_language(self, meta_lang): # -> None:
        """Save langauges in their ISO 2-character form
        """
        ...
    
    def set_meta_keywords(self, meta_keywords): # -> None:
        """Store the keys in list form
        """
        ...
    
    def set_meta_favicon(self, meta_favicon): # -> None:
        ...
    
    def set_meta_description(self, meta_description): # -> None:
        ...
    
    def set_meta_data(self, meta_data): # -> None:
        ...
    
    def set_canonical_link(self, canonical_link): # -> None:
        ...
    
    def set_tags(self, tags): # -> None:
        ...
    
    def set_movies(self, movie_objects): # -> None:
        """Trim video objects into just urls
        """
        ...
    
    def throw_if_not_downloaded_verbose(self): # -> None:
        """Parse ArticleDownloadState -> log readable status
        -> maybe throw ArticleException
        """
        ...
    
    def throw_if_not_parsed_verbose(self): # -> None:
        """Parse `is_parsed` status -> log readable status
        -> maybe throw ArticleException
        """
        ...
    


