"""
This type stub file was generated by pyright.
"""

"""
Newspaper uses a lot of python-goose's parsing code. View theirlicense:
https://github.com/codelucas/newspaper/blob/master/GOOSE-LICENSE.txt

Parser objects will only contain operations that manipulate
or query an lxml or soup dom object generated from an article's html.
"""
log = ...
class Parser:
    @classmethod
    def xpath_re(cls, node, expression):
        ...
    
    @classmethod
    def drop_tag(cls, nodes): # -> None:
        ...
    
    @classmethod
    def css_select(cls, node, selector):
        ...
    
    @classmethod
    def get_unicode_html(cls, html): # -> str:
        ...
    
    @classmethod
    def fromstring(cls, html): # -> Any | None:
        ...
    
    @classmethod
    def clean_article_html(cls, node): # -> str | bytes | Any:
        ...
    
    @classmethod
    def nodeToString(cls, node):
        """`decode` is needed at the end because `etree.tostring`
        returns a python bytestring
        """
        ...
    
    @classmethod
    def replaceTag(cls, node, tag): # -> None:
        ...
    
    @classmethod
    def stripTags(cls, node, *tags): # -> None:
        ...
    
    @classmethod
    def getElementById(cls, node, idd): # -> None:
        ...
    
    @classmethod
    def getElementsByTag(cls, node, tag=..., attr=..., value=..., childs=..., use_regex=...) -> list:
        ...
    
    @classmethod
    def appendChild(cls, node, child): # -> None:
        ...
    
    @classmethod
    def childNodes(cls, node): # -> list[Unknown]:
        ...
    
    @classmethod
    def childNodesWithText(cls, node): # -> list[Unknown]:
        ...
    
    @classmethod
    def textToPara(cls, text): # -> Any | None:
        ...
    
    @classmethod
    def getChildren(cls, node):
        ...
    
    @classmethod
    def getElementsByTags(cls, node, tags):
        ...
    
    @classmethod
    def createElement(cls, tag=..., text=..., tail=...): # -> HtmlElement:
        ...
    
    @classmethod
    def getComments(cls, node):
        ...
    
    @classmethod
    def getParent(cls, node):
        ...
    
    @classmethod
    def remove(cls, node): # -> None:
        ...
    
    @classmethod
    def getTag(cls, node):
        ...
    
    @classmethod
    def getText(cls, node): # -> str:
        ...
    
    @classmethod
    def previousSiblings(cls, node): # -> list[Unknown]:
        """
            returns preceding siblings in reverse order (nearest sibling is first)
        """
        ...
    
    @classmethod
    def previousSibling(cls, node):
        ...
    
    @classmethod
    def nextSibling(cls, node):
        ...
    
    @classmethod
    def isTextNode(cls, node): # -> bool:
        ...
    
    @classmethod
    def getAttribute(cls, node, attr=...):
        ...
    
    @classmethod
    def delAttribute(cls, node, attr=...): # -> None:
        ...
    
    @classmethod
    def setAttribute(cls, node, attr=..., value=...): # -> None:
        ...
    
    @classmethod
    def outerHtml(cls, node):
        ...
    


